{"version":3,"file":"useFormInput-BPLeApz_.js","sources":["../src/utils/normalizeInput.ts","../src/composables/useFormInput.ts"],"sourcesContent":["import type {Numberish} from '../types/CommonTypes'\n\nexport const normalizeInput = (\n  v: Numberish | null,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  if (v === null) return\n  let update = v\n  if (modelModifiers.number && typeof update === 'string' && update !== '') {\n    const parsed = Number.parseFloat(update)\n    update = Number.isNaN(parsed) ? update : parsed\n  }\n  return update\n}\n","import type {Numberish} from '../types/CommonTypes'\nimport {inject, nextTick, onActivated, onMounted, ref, type Ref, type ShallowRef} from 'vue'\nimport {useAriaInvalid} from './useAriaInvalid'\nimport {useId} from './useId'\nimport {useDebounceFn, useFocus, useToNumber} from '@vueuse/core'\nimport type {CommonInputProps} from '../types/FormCommonInputProps'\nimport {formGroupPluginKey} from '../utils/keys'\n\nexport const useFormInput = (\n  props: Readonly<CommonInputProps>,\n  input:\n    | Readonly<ShallowRef<HTMLInputElement | null>>\n    | Readonly<ShallowRef<HTMLTextAreaElement | null>>,\n  modelValue: Ref<Numberish | null>,\n  modelModifiers: Record<'number' | 'lazy' | 'trim', true | undefined>\n) => {\n  const forceUpdateKey = ref(0)\n\n  const computedId = useId(() => props.id, 'input')\n  const debounceNumber = useToNumber(() => props.debounce ?? 0)\n  const debounceMaxWaitNumber = useToNumber(() => props.debounceMaxWait ?? NaN)\n\n  // This automatically adds the appropriate \"for\" attribute to a BFormGroup label\n  inject(formGroupPluginKey, null)?.(computedId)\n\n  const internalUpdateModelValue = useDebounceFn(\n    (value: Numberish) => {\n      modelValue.value = value\n    },\n    () => (modelModifiers.lazy === true ? 0 : debounceNumber.value),\n    {maxWait: () => (modelModifiers.lazy === true ? NaN : debounceMaxWaitNumber.value)}\n  )\n\n  const updateModelValue = (value: Numberish, force = false) => {\n    if (modelModifiers.lazy === true && force === false) return\n    internalUpdateModelValue(value)\n  }\n\n  const {focused} = useFocus(input, {\n    initialValue: props.autofocus,\n  })\n\n  const _formatValue = (value: string, evt: Readonly<Event>, force = false) => {\n    if (props.formatter !== undefined && (!props.lazyFormatter || force)) {\n      return props.formatter(value, evt)\n    }\n    return value\n  }\n  onMounted(() => {\n    if (input.value) {\n      input.value.value = modelValue.value?.toString() ?? ''\n    }\n  })\n\n  onActivated(() => {\n    nextTick(() => {\n      if (props.autofocus) {\n        focused.value = true\n      }\n    })\n  })\n\n  const computedAriaInvalid = useAriaInvalid(\n    () => props.ariaInvalid,\n    () => props.state\n  )\n\n  const onInput = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n\n    updateModelValue(nextModel)\n  }\n\n  const onChange = (evt: Readonly<Event>) => {\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt)\n    if (evt.defaultPrevented) {\n      evt.preventDefault()\n      return\n    }\n\n    const nextModel = formattedValue\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n  }\n\n  const onBlur = (evt: Readonly<FocusEvent>) => {\n    if (!modelModifiers.lazy && !props.lazyFormatter && !modelModifiers.trim) return\n\n    const {value} = evt.target as HTMLInputElement\n    const formattedValue = _formatValue(value, evt, true)\n\n    const nextModel = modelModifiers.trim ? formattedValue.trim() : formattedValue\n    const needsForceUpdate = nextModel.length !== formattedValue.length\n    if (modelValue.value !== nextModel) {\n      updateModelValue(formattedValue, true)\n    }\n    if (modelModifiers.trim && needsForceUpdate) {\n      // The value is trimmed but there would still exist some white space\n      // So, force update the value. You need to bind this to :key on the input element\n      forceUpdateKey.value = forceUpdateKey.value + 1\n    }\n  }\n\n  const focus = () => {\n    if (!props.disabled) {\n      focused.value = true\n    }\n  }\n\n  const blur = () => {\n    if (!props.disabled) {\n      focused.value = false\n    }\n  }\n\n  return {\n    input,\n    computedId,\n    computedAriaInvalid,\n    onInput,\n    onChange,\n    onBlur,\n    focus,\n    blur,\n    forceUpdateKey,\n  }\n}\n"],"names":["v","modelModifiers","update","number","parsed","Number","parseFloat","isNaN","props","input","modelValue","forceUpdateKey","ref","computedId","useId","id","debounceNumber","useToNumber","debounce","debounceMaxWaitNumber","debounceMaxWait","NaN","inject","formGroupPluginKey","_a","internalUpdateModelValue","useDebounceFn","value","lazy","maxWait","updateModelValue","force","focused","useFocus","initialValue","autofocus","_formatValue","evt","formatter","lazyFormatter","onMounted","toString","onActivated","nextTick","computedAriaInvalid","useAriaInvalid","ariaInvalid","state","onInput","target","formattedValue","defaultPrevented","preventDefault","onChange","nextModel","onBlur","trim","needsForceUpdate","length","focus","disabled","blur"],"mappings":"wOAE8B,CAC5BA,EACAC,KAEA,GAAU,OAAND,EAAY,OAChB,IAAIE,EAASF,EACb,GAAIC,EAAeE,QAA4B,iBAAXD,GAAkC,KAAXA,EAAe,CAClE,MAAAE,EAASC,OAAOC,WAAWJ,GACjCA,EAASG,OAAOE,MAAMH,GAAUF,EAASE,CAAA,CAEpC,OAAAF,CAAA,uBCJmB,CAC1BM,EACAC,EAGAC,EACAT,WAEM,MAAAU,EAAiBC,MAAI,GAErBC,EAAaC,EAAAA,OAAM,IAAMN,EAAMO,IAAI,SACnCC,EAAiBC,EAAAA,aAAY,IAAMT,EAAMU,UAAY,IACrDC,EAAwBF,EAAAA,aAAY,IAAMT,EAAMY,iBAAmBC,MAGlEC,OAAAA,EAAAA,EAAAA,OAAAC,EAAAA,mBAAoB,QAAQC,EAAAX,GAEnC,MAAMY,EAA2BC,EAAAA,eAC9BC,IACCjB,EAAWiB,MAAQA,CAAA,IAErB,KAA+B,IAAxB1B,EAAe2B,KAAgB,EAAIZ,EAAeW,OACzD,CAACE,QAAS,KAA+B,IAAxB5B,EAAe2B,KAAgBP,IAAMF,EAAsBQ,QAGxEG,EAAmB,CAACH,EAAkBI,GAAQ,MACtB,IAAxB9B,EAAe2B,OAA2B,IAAVG,GACpCN,EAAyBE,EAAK,GAG1BK,QAACA,GAAWC,EAAAA,SAASxB,EAAO,CAChCyB,aAAc1B,EAAM2B,YAGhBC,EAAe,CAACT,EAAeU,EAAsBN,GAAQ,SACzC,IAApBvB,EAAM8B,WAA6B9B,EAAM+B,gBAAiBR,EAGvDJ,EAFEnB,EAAM8B,UAAUX,EAAOU,GAIlCG,EAAAA,WAAU,WACJ/B,EAAMkB,QACRlB,EAAMkB,MAAMA,OAAQ,OAAAH,EAAAd,EAAWiB,YAAX,EAAAH,EAAkBiB,aAAc,GAAA,IAIxDC,EAAAA,aAAY,KACVC,EAAAA,UAAS,KACHnC,EAAM2B,YACRH,EAAQL,OAAQ,EAAA,GAEnB,IAGH,MAAMiB,EAAsBC,EAAAA,gBAC1B,IAAMrC,EAAMsC,cACZ,IAAMtC,EAAMuC,QA4DP,MAAA,CACLtC,QACAI,aACA+B,sBACAI,QA7DeX,IACT,MAAAV,MAACA,GAASU,EAAIY,OACdC,EAAiBd,EAAaT,EAAOU,GAC3C,GAAIA,EAAIc,iBAEN,YADAd,EAAIe,iBAMNtB,EAFkBoB,EAEQ,EAoD1BG,SAjDgBhB,IACV,MAAAV,MAACA,GAASU,EAAIY,OACdC,EAAiBd,EAAaT,EAAOU,GAC3C,GAAIA,EAAIc,iBAEN,YADAd,EAAIe,iBAIN,MAAME,EAAYJ,EACdxC,EAAWiB,QAAU2B,GACvBxB,EAAiBoB,GAAgB,EAAI,EAwCvCK,OApCclB,IACV,IAACpC,EAAe2B,OAASpB,EAAM+B,gBAAkBtC,EAAeuD,KAAM,OAEpE,MAAA7B,MAACA,GAASU,EAAIY,OACdC,EAAiBd,EAAaT,EAAOU,GAAK,GAE1CiB,EAAYrD,EAAeuD,KAAON,EAAeM,OAASN,EAC1DO,EAAmBH,EAAUI,SAAWR,EAAeQ,OACzDhD,EAAWiB,QAAU2B,GACvBxB,EAAiBoB,GAAgB,GAE/BjD,EAAeuD,MAAQC,IAGV9C,EAAAgB,MAAQhB,EAAegB,MAAQ,EAAA,EAuBhDgC,MAnBY,KACPnD,EAAMoD,WACT5B,EAAQL,OAAQ,EAAA,EAkBlBkC,KAdW,KACNrD,EAAMoD,WACT5B,EAAQL,OAAQ,EAAA,EAalBhB,iBACF"}