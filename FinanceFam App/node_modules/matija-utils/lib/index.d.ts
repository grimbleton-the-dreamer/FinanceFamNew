import { IDictionary } from "./models";
/**
 * Finds the common elements of two arrays.
 * @param {any[]} a
 * @param {any[]} b
 * @example
 * intersect([1, 2, 3], [1, 2]); // [1, 2]
 */
export declare const intersect: (a: any[], b: any[]) => any[];
/**
 * Chunks an array into a new array consisting of smaller arrays of a specified size.
 * @param {any[]} arr
 * @param {number} chunkSize
 * @example
 * chunk([1, 2, 3, 4, 5, 6], 2); // [[1, 2], [3, 4], [5, 6]]
 */
export declare const chunk: (arr: any[], chunkSize: number) => any[][];
/**
 * Creates an array of numbers from a specified range.
 * @param {number} start
 * @param {number} end
 * @example
 * range(0, 5); // [0, 1, 2, 3, 4, 5]
 */
export declare const range: (start: number, end: number) => number[];
/**
 * Splits and clumps together an array of elements by using a separator.
 * @param {any[]} arr
 * @param {any} separator
 * @example
 * splitByValue([1, 2, 3, 4, "x", 5, 6, 7, 8], "x"); // [[1, 2, 3, 4], [5, 6, 7, 8]]
 */
export declare const splitByValue: (arr: any[], separator: any) => any[][];
/**
 * Sums an unspecified amount of inputs.
 * @param {...number} args
 * @example
 * sum(1, 2, 3); // 6
 */
export declare const sum: (...args: number[]) => number;
/**
 * Multiplies an unspecified amount of inputs.
 * @param {...number} args
 * @example
 * product(1, 2, 3); // 6
 */
export declare const product: (...args: number[]) => number;
/**
 * Performs a modulo operation akin to that of Python.
 * @see {@link https://docs.python.org/3.3/reference/expressions.html#binary-arithmetic-operations}
 * @param {number} a
 * @param {number} b
 * @example
 * mod(-2, 20); // 18
 */
export declare const mod: (a: number, b: number) => number;
/**
 * Groups values in an array of objects by the provided property.
 * @param {T[]} array
 * @param {string} property
 * @return {IDictionary<T[]>} A dictionary with the key being the property and the value being the objects grouped by the provided property.
 * @example
 * const x = [{
 *   name: "Ivan",
 *   company: "Google"
 * },
 * {
 *   name: "Kenny",
 *   company: "Google"
 * },
 * {
 *   name: "Joseph",
 *   company: "Amazon"
 * }];
 *groupBy(x, "company");
 *
 * {
 *   "Google": [{
 *     "name": "Ivan",
 *     "company": "Google"
 *   },
 *   {
 *     "name": "Kenny",
 *     "company": "Google"
 *   }],
 *   "Amazon": [{
 *     "name": "Joseph",
 *     "company": "Amazon"
 *   }]
 * }
 */
export declare const groupBy: <T>(array: T[], property: string) => IDictionary<T[]>;
/**
 * Repeats a function a set amount of times.
 * @param {number} n
 * @param {function} fn
 * @example
 * repeat(3, () => console.log("x")); // xxx
 */
export declare const repeat: (n: number, fn: () => void) => void;
/**
 * Makes a deep clone of an object.
 * @param {any} obj
 */
export declare const cloneObject: (obj: any) => {};
/**
 * Creates an array of a certain length filled with a specified value.
 * @param {number} length
 * @param {any} value
 * @example
 * generateArray(3, []); // [[], [], []]
 */
export declare const generateArray: (length: number, value: any) => any[];
/**
 * Returns the last `N` elements of an array. If 1 is specified, it returns only the last element.
 * @param {any[]} arr
 * @param {number} n
 * @example
 * end(2, [1, 2, 3]); // [2, 3]
 */
export declare const end: (arr: any[], n: number) => any | any[];
/**
 * Returns the month of a provided date in the long format.
 * @param {Date | null} date
 */
export declare const getMonth: (date: Date | null) => string;
/**
 * Calculates the difference in months between two dates.
 * @param {Date} from
 * @param {Date} to
 */
export declare const monthDiff: (from: Date, to: Date) => number;
/**
 * Creates a string that describes the difference between two dates.
 * @param {Date} from
 * @param {Date} to
 */
export declare const dateDiffReadable: (from: Date, to: Date) => string;
/**
 * Gets a random integer between an inclusive range.
 * @param {number} min
 * @param {number} max
 * @example
 * randInt(1, 20); // 18
 */
export declare const randInt: (min: number, max: number) => number;
/**
 * Gets a random element of an array.
 * @param {any[]} arr
 * @example
 * sample([1, 2, 3]); // 2
 */
export declare const sample: (arr: any[]) => any;
/**
 * Generates a string composed of `n` random characters.
 * @param {number} n
 * @example
 * generateRandomString(5); // "AXRF0"
 */
export declare const generateRandomString: (n: number) => string;
/**
 * Combines two arrays into one, similar to the Python `zip` function.
 * @see https://docs.python.org/3.3/library/functions.html#zip
 * @param {any[]} a
 * @param {any[]} b
 * @example
 * const a = [1, 2, 3];
 * const b = ["a", "b", "c"];
 * zip(a, b); // [[1, "a"], [2, "b"], [3, "c"]]
 */
export declare const zip: (a: any[], b: any[]) => any[][];
/**
 * Gets an array that contains the elements that are present in the array `a`, but not in the array `b`.
 * @param {any[]} a
 * @param {any[]} b
 * @example
 * difference([1, 2, 3], [2, 3, 4]); // [1]
 */
export declare const difference: (a: any[], b: any[]) => any[];
/**
 * Gets the number of elements in an array that conform to the given condition.
 * @param {any[]} arr
 * @param {Function} condition
 * @example
 * count([1, 2, 3], (x) => x > 2); // 1
 */
export declare const count: (arr: any[], condition: (e: any) => boolean) => number;
/**
 * Abbreviates large numbers with SI symbols.
 * @param {number} val
 * @example
 * abbreviateNumber(14568); // "14.6k"
 */
export declare const abbreviateNumber: (val: number) => string;
/**
 * Creates an acronym of a given string.
 * @param {string} txt
 * @example
 * acronym("Sir Isaac Newton"); // "SIN"
 */
export declare const acronym: (txt: string) => string;
/**
 * Finds the common elements of two arrays.
 * @param {any[]} a
 * @param {any[]} b
 * @example
 * common([1, 2, 3], [2, 3, 4]); // [2, 3]
 */
export declare const common: (a: any[], b: any[]) => any[];
export declare const randomColorHex: () => string;
/**
 * Cuts a text off at a certain length, ending it with three dots.
 * @param {string} text
 * @param {number} length
 * @example
 * textEllipsis("hello", 3); // "hel..."
 */
export declare const textEllipsis: (text: string | null | undefined, length: number) => string;
/**
 * Lightens or darkens a hex color value by a certain percentage, negatives values for darker and positive ones for lighter tones.
 * @param {string} color
 * @param {number} percent
 * @example
 * shadeColor("#c72c2c", -40); // "#771a1a"
 * shadeColor("#c72c2c", 40); // "#ff3d3d"
 */
export declare function shadeColor(color: string | undefined, percent: number): string;
/**
 * Purges the provided array of falsy values.
 * @param {any[]} arr
 * @example
 * onlyTruthy([1, 2, 3, false, undefined, 4]); // [1, 2, 3, 4]
 */
export declare const onlyTruthy: (arr: any[]) => any[];
/**
 * Purges the provided array of truthy values.
 * @param {any[]} arr
 * @example
 * onlyFalsy([1, 2, 3, false, undefined, 4]); // [false, undefined]
 */
export declare const onlyFalsy: (arr: any[]) => any[];
/**
 * Calculates the difference of an unspecified amount of inputs.
 * @param {...number} args
 * @example
 * diff(1, 2, 3); // -4
 */
export declare const diff: (...args: number[]) => number;
/**
 * Divides an unspecified amount of inputs.
 * @param {...number} args
 * @example
 * div(1, 2, 3); // 0.1666666666666667
 */
export declare const div: (...args: number[]) => number;
